"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xpring_common_js_1 = require("xpring-common-js");
class FakeNetworkClientResponses {
    constructor(getAccountInfoResponse = FakeNetworkClientResponses.defaultAccountInfoResponse(), getFeeResponse = FakeNetworkClientResponses.defaultFeeResponse(), submitSignedTransactionResponse = FakeNetworkClientResponses.defaultSubmitSignedTransactionResponse()) {
        this.getAccountInfoResponse = getAccountInfoResponse;
        this.getFeeResponse = getFeeResponse;
        this.submitSignedTransactionResponse = submitSignedTransactionResponse;
    }
    static defaultAccountInfoResponse() {
        const balance = new xpring_common_js_1.XRPAmount();
        balance.setDrops("4000");
        const accountInfo = new xpring_common_js_1.AccountInfo();
        accountInfo.setBalance(balance);
        return accountInfo;
    }
    static defaultFeeResponse() {
        const amount = new xpring_common_js_1.XRPAmount();
        amount.setDrops("10");
        const fee = new xpring_common_js_1.Fee();
        fee.setAmount(amount);
        return fee;
    }
    static defaultSubmitSignedTransactionResponse() {
        const submitSignedTransactionResponse = new xpring_common_js_1.SubmitSignedTransactionResponse();
        submitSignedTransactionResponse.setEngineResult("tesSUCCESS");
        submitSignedTransactionResponse.setEngineResultCode(0);
        submitSignedTransactionResponse.setEngineResultMessage("The transaction was applied. Only final in a validated ledger.");
        return submitSignedTransactionResponse;
    }
}
FakeNetworkClientResponses.defaultError = new Error("fake network client failure");
FakeNetworkClientResponses.defaultSuccessfulResponses = new FakeNetworkClientResponses();
FakeNetworkClientResponses.defaultErrorResponses = new FakeNetworkClientResponses(FakeNetworkClientResponses.defaultError, FakeNetworkClientResponses.defaultError, FakeNetworkClientResponses.defaultError);
exports.FakeNetworkClientResponses = FakeNetworkClientResponses;
class FakeNetworkClient {
    constructor(responses = FakeNetworkClientResponses.defaultSuccessfulResponses) {
        this.responses = responses;
    }
    getAccountInfo(_accountInfoRequest) {
        const accountInfoResponse = this.responses.getAccountInfoResponse;
        if (accountInfoResponse instanceof Error) {
            return Promise.reject(accountInfoResponse);
        }
        return Promise.resolve(accountInfoResponse);
    }
    getFee(_feeRequest) {
        const feeResponse = this.responses.getFeeResponse;
        if (feeResponse instanceof Error) {
            return Promise.reject(feeResponse);
        }
        return Promise.resolve(feeResponse);
    }
    submitSignedTransaction(_submitSignedTransactionRequest) {
        const submitSignedTransactionResponse = this.responses
            .submitSignedTransactionResponse;
        if (submitSignedTransactionResponse instanceof Error) {
            return Promise.reject(submitSignedTransactionResponse);
        }
        return Promise.resolve(submitSignedTransactionResponse);
    }
}
exports.FakeNetworkClient = FakeNetworkClient;
//# sourceMappingURL=fake-network-client.js.map