"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const xpring_common_js_1 = require("xpring-common-js");
const grpc_network_client_1 = __importDefault(require("./grpc-network-client"));
class XpringClientErrorMessages {
}
XpringClientErrorMessages.malformedResponse = "Malformed Response.";
XpringClientErrorMessages.signingFailure = "Unable to sign the transaction";
exports.XpringClientErrorMessages = XpringClientErrorMessages;
class XpringClient {
    constructor(networkClient) {
        this.networkClient = networkClient;
    }
    static xpringClientWithEndpoint(grpcURL) {
        const grpcClient = new grpc_network_client_1.default(grpcURL);
        return new XpringClient(grpcClient);
    }
    async getBalance(address) {
        return this.getAccountInfo(address).then(async (accountInfo) => {
            const balance = accountInfo.getBalance();
            if (balance === undefined) {
                return Promise.reject(new Error(XpringClientErrorMessages.malformedResponse));
            }
            return balance;
        });
    }
    async send(sender, amount, destination) {
        return this.getFee().then(async (fee) => {
            return this.getAccountInfo(sender.getAddress()).then(async (accountInfo) => {
                if (accountInfo.getSequence() == undefined) {
                    return Promise.reject(new Error(XpringClientErrorMessages.malformedResponse));
                }
                const payment = new xpring_common_js_1.Payment();
                payment.setXrpAmount(amount);
                payment.setDestination(destination);
                const transaction = new xpring_common_js_1.Transaction();
                transaction.setAccount(sender.getAddress());
                transaction.setFee(fee);
                transaction.setSequence(accountInfo.getSequence());
                transaction.setPayment(payment);
                transaction.setSigningPublicKeyHex(sender.getPublicKey());
                var signedTransaction;
                try {
                    signedTransaction = xpring_common_js_1.Signer.signTransaction(transaction, sender);
                }
                catch (signingError) {
                    const signingErrorMessage = XpringClientErrorMessages.signingFailure +
                        ". " +
                        signingError.message;
                    return Promise.reject(new Error(signingErrorMessage));
                }
                if (signedTransaction == undefined) {
                    return Promise.reject(new Error(XpringClientErrorMessages.signingFailure));
                }
                const submitSignedTransactionRequest = new xpring_common_js_1.SubmitSignedTransactionRequest();
                submitSignedTransactionRequest.setSignedTransaction(signedTransaction);
                return this.networkClient.submitSignedTransaction(submitSignedTransactionRequest);
            });
        });
    }
    async getAccountInfo(address) {
        const getAccountInfoRequest = new xpring_common_js_1.GetAccountInfoRequest();
        getAccountInfoRequest.setAddress(address);
        return this.networkClient.getAccountInfo(getAccountInfoRequest);
    }
    async getFee() {
        const getFeeRequest = new xpring_common_js_1.GetFeeRequest();
        return this.networkClient.getFee(getFeeRequest).then(async (fee) => {
            const feeAmount = fee.getAmount();
            if (feeAmount == undefined) {
                return Promise.reject(new Error(XpringClientErrorMessages.malformedResponse));
            }
            return feeAmount;
        });
    }
}
exports.default = XpringClient;
//# sourceMappingURL=xpring-client.js.map